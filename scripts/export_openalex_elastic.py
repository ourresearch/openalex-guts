from datetime import datetime
import gzip
import json
import multiprocessing as mp
import os
import time

from elasticsearch import Elasticsearch
from elasticsearch_dsl import Search
import redis

from app import ELASTIC_URL

data_dir = os.path.join(os.path.expanduser('~'), 'data', datetime.now().strftime("%Y_%m_%d"))
print(f"data directory is {data_dir}")

# Configure Elasticsearch client
es = Elasticsearch([ELASTIC_URL])

# Configure redis client
r = redis.Redis(host='localhost', port=6379, db=2)

entities_to_indices = {
    # "authors": "authors-v11",
    # "concepts": "concepts-v8",
    # "funders": "funders-v3",
    # "institutions": "institutions-v5",
    # "publishers": "publishers-v4",
    # "sources": "sources-v2",
    "works": "works-v18-*,-*invalid-data",
}


def get_distinct_updated_dates(index_name):
    print(f"get distinct changed dates for {index_name}")

    # Define the query to aggregate on changed_date
    query = {
        "size": 0,  # we don't need the actual documents
        "aggs": {
            "distinct_dates": {
                "date_histogram": {
                    "field": "updated_date",
                    "calendar_interval": "day",  # aggregate into buckets by day
                }
            }
        }
    }

    # Execute the search query
    response = es.search(index=index_name, body=query)

    # Extract the bucket keys
    dates = [bucket["key_as_string"] for bucket in response["aggregations"]["distinct_dates"]["buckets"]]

    # Convert the dates to yyyy-mm-dd format
    dates = [date.split("T")[0] for date in dates]

    # Sort the dates newest to oldest
    dates.sort(reverse=True)

    return dates


def create_search_query(index_name, d, search_after=None):
    page_size = 1000
    s = Search(using=es, index=index_name).query("term", updated_date=d)
    s = s.sort(*["-cited_by_count", "id"])
    s = s.source(excludes=['_source', 'fulltext', 'abstract', 'version', '@version', '@timestamp'])
    if search_after:
        s = s.extra(size=page_size, search_after=search_after)
    else:
        s = s.extra(size=page_size)
    s = s.params(preference=d)
    return s


def export_date(args):
    index_name, entity_type, d = args
    max_file_size = 5 * 1024 ** 3  # 5GB uncompressed
    count = 0
    index_id_prefix = f"https://openalex.org/{entity_type[0].upper()}"
    date_dir = os.path.join(data_dir, entity_type, f"updated_date={d}")

    part_file_number = 0
    part_file = None  # Initialize as None
    total_size = 0
    s = create_search_query(index_name, d)
    response = s.execute()

    while len(response.hits) > 0:
        if part_file is None:  # Only create dir and file if there are hits
            os.makedirs(date_dir, exist_ok=True)
            part_file = gzip.open(f'{date_dir}/part_{str(part_file_number).zfill(3)}.gz', 'wt')

        for hit in response:
            record_id = hit.id
            # convert to integer
            try:
                record_id = int(record_id.replace(index_id_prefix, ""))
            except ValueError:
                print(f"Skipping record {record_id}. Not an integer.")
                continue
            if r.sadd('record_ids', record_id):
                count += 1
                record = hit.to_dict()

                # handle truncated authors
                if entity_type == "works" and record.get("authorships") and record.get('authorships_full'):
                    record["authorships"] = record["authorships_full"]
                    del record["authorships_full"]
                    if record.get("is_authors_truncated"):
                        del record["is_authors_truncated"]

                # handle abstract inverted index
                if entity_type == "works" and record.get("abstract_inverted_index"):
                    record["abstract_inverted_index"] = json.loads(record["abstract_inverted_index"])

                line = json.dumps(record) + '\n'
                line_size = len(line.encode('utf-8'))

                # If this line will make the file exceed the max size, close the current file and open a new one
                if total_size + line_size > max_file_size:
                    part_file.close()
                    part_file_number += 1
                    part_file = gzip.open(f'{date_dir}/part_{str(part_file_number).zfill(3)}.gz', 'wt')
                    total_size = 0

                if count % 10000 == 0:
                    print(f"{entity_type} {d} {count}")

                part_file.write(line)
                total_size += line_size
            else:
                print(f"Skipping record {record_id}. Already in dataset.")

        # Get the last document's sort value and use it for the search_after parameter
        last_hit_sort = response.hits.hits[-1]['sort']
        s = create_search_query(index_name, d, search_after=last_hit_sort)
        response = s.execute()

    if part_file is not None:  # If file was created, close it
        part_file.close()


def export_entity(index_name, entity_type):
    # distinct_updated_dates = get_distinct_updated_dates(index_name)
    distinct_updated_dates = ['2023-08-09', '2023-08-08', '2023-08-07', '2023-08-06', '2023-08-05', '2023-08-04', '2023-08-03', '2023-08-02', '2023-08-01', '2023-07-31', '2023-07-30', '2023-07-29', '2023-07-28', '2023-07-27', '2023-07-26', '2023-07-25', '2023-07-24', '2023-07-23', '2023-07-22', '2023-07-21', '2023-07-20', '2023-07-19', '2023-07-18', '2023-07-17', '2023-07-16', '2023-07-15', '2023-07-14', '2023-07-13', '2023-07-12', '2023-07-11', '2023-07-10', '2023-07-09', '2023-07-08', '2023-07-07', '2023-07-06', '2023-07-05', '2023-07-04', '2023-07-03', '2023-07-02', '2023-07-01', '2023-06-30', '2023-06-29', '2023-06-28', '2023-06-27', '2023-06-26', '2023-06-25', '2023-06-24', '2023-06-23', '2023-06-22', '2023-06-21', '2023-06-20', '2023-06-19', '2023-06-18', '2023-06-17', '2023-06-16', '2023-06-15', '2023-06-14', '2023-06-13', '2023-06-12', '2023-06-11', '2023-06-10', '2023-06-09', '2023-06-08', '2023-06-07', '2023-06-06', '2023-06-05', '2023-06-04', '2023-06-03', '2023-06-02', '2023-06-01', '2023-05-31', '2023-05-30', '2023-05-29', '2023-05-28', '2023-05-27', '2023-05-26', '2023-05-25', '2023-05-24', '2023-05-23', '2023-05-22', '2023-05-21', '2023-05-20', '2023-05-19', '2023-05-18', '2023-05-17', '2023-05-16', '2023-05-15', '2023-05-14', '2023-05-13', '2023-05-12', '2023-05-11', '2023-05-10', '2023-05-09', '2023-05-08', '2023-05-07', '2023-05-06', '2023-05-05', '2023-05-04', '2023-05-03', '2023-05-02', '2023-05-01', '2023-04-30', '2023-04-29', '2023-04-28', '2023-04-27', '2023-04-26', '2023-04-25', '2023-04-24', '2023-04-23', '2023-04-22', '2023-04-21', '2023-04-20', '2023-04-19', '2023-04-18', '2023-04-17', '2023-04-16', '2023-04-15', '2023-04-14', '2023-04-13', '2023-04-12', '2023-04-11', '2023-04-10', '2023-04-09', '2023-04-08', '2023-04-07', '2023-04-06', '2023-04-05', '2023-04-04', '2023-04-03', '2023-04-02', '2023-04-01', '2023-03-31', '2023-03-30', '2023-03-29', '2023-03-28', '2023-03-27', '2023-03-26', '2023-03-25', '2023-03-24', '2023-03-23', '2023-03-22', '2023-03-21', '2023-03-20', '2023-03-19', '2023-03-18', '2023-03-17', '2023-03-16', '2023-03-15', '2023-03-14', '2023-03-13', '2023-03-12', '2023-03-11', '2023-03-10', '2023-03-09', '2023-03-08', '2023-03-07', '2023-03-06', '2023-03-05', '2023-03-04', '2023-03-03', '2023-03-02', '2023-03-01', '2023-02-28', '2023-02-27', '2023-02-26', '2023-02-25', '2023-02-24', '2023-02-23', '2023-02-22', '2023-02-21', '2023-02-20', '2023-02-19', '2023-02-18', '2023-02-17', '2023-02-16', '2023-02-15', '2023-02-14', '2023-02-13', '2023-02-12', '2023-02-11', '2023-02-10', '2023-02-09', '2023-02-08', '2023-02-07', '2023-02-06', '2023-02-05', '2023-02-04', '2023-02-03', '2023-02-02', '2023-02-01', '2023-01-31', '2023-01-30', '2023-01-29', '2023-01-28', '2023-01-27', '2023-01-26', '2023-01-25', '2023-01-24', '2023-01-23', '2023-01-22', '2023-01-21', '2023-01-20', '2023-01-19', '2023-01-18', '2023-01-17', '2023-01-16', '2023-01-15', '2023-01-14', '2023-01-13', '2023-01-12', '2023-01-11', '2023-01-10', '2023-01-09', '2023-01-08', '2023-01-07', '2023-01-06', '2023-01-05', '2023-01-04', '2023-01-03', '2023-01-02', '2023-01-01', '2022-12-31', '2022-12-30', '2022-12-29', '2022-12-28', '2022-12-27', '2022-12-26', '2022-12-25', '2022-12-24', '2022-12-23', '2022-12-22', '2022-12-21', '2022-12-20', '2022-12-19', '2022-12-18', '2022-12-17', '2022-12-16', '2022-12-15', '2022-12-14', '2022-12-13', '2022-12-12', '2022-12-11', '2022-12-10', '2022-12-09', '2022-12-08', '2022-12-07', '2022-12-06', '2022-12-05', '2022-12-04', '2022-12-03', '2022-12-02', '2022-12-01', '2022-11-30', '2022-11-29', '2022-11-28', '2022-11-27', '2022-11-26', '2022-11-25', '2022-11-24', '2022-11-23', '2022-11-22', '2022-11-21', '2022-11-20', '2022-11-19', '2022-11-18', '2022-11-17', '2022-11-16', '2022-11-15', '2022-11-14', '2022-11-13', '2022-11-12', '2022-11-11', '2022-11-10', '2022-11-09', '2022-11-08', '2022-11-07', '2022-11-06', '2022-11-05', '2022-11-04', '2022-11-03', '2022-11-02', '2022-11-01', '2022-10-31', '2022-10-30', '2022-10-29', '2022-10-28', '2022-10-27', '2022-10-26', '2022-10-25', '2022-10-24', '2022-10-23', '2022-10-22', '2022-10-21', '2022-10-20', '2022-10-19', '2022-10-18', '2022-10-17', '2022-10-16', '2022-10-15', '2022-10-14', '2022-10-13', '2022-10-12', '2022-10-11', '2022-10-10', '2022-10-09', '2022-10-08', '2022-10-07', '2022-10-06', '2022-10-05', '2022-10-04', '2022-10-03', '2022-10-02', '2022-10-01', '2022-09-30', '2022-09-29', '2022-09-28', '2022-09-27', '2022-09-26', '2022-09-25', '2022-09-24', '2022-09-23', '2022-09-22', '2022-09-21', '2022-09-20', '2022-09-19', '2022-09-18', '2022-09-17', '2022-09-16', '2022-09-15', '2022-09-14', '2022-09-13', '2022-09-12', '2022-09-11', '2022-09-10', '2022-09-09', '2022-09-08', '2022-09-07', '2022-09-06', '2022-09-05', '2022-09-04', '2022-09-03', '2022-09-02', '2022-09-01', '2022-08-31', '2022-08-30', '2022-08-29', '2022-08-28', '2022-08-27', '2022-08-26', '2022-08-25', '2022-08-24', '2022-08-23', '2022-08-22', '2022-08-21', '2022-08-20', '2022-08-19', '2022-08-18', '2022-08-17', '2022-08-16', '2022-08-15', '2022-08-14', '2022-08-13', '2022-08-12', '2022-08-11', '2022-08-10', '2022-08-09', '2022-08-08', '2022-08-07', '2022-08-06', '2022-08-05', '2022-08-04', '2022-08-03', '2022-08-02', '2022-08-01', '2022-07-31', '2022-07-30', '2022-07-29', '2022-07-28', '2022-07-27', '2022-07-26', '2022-07-25', '2022-07-24', '2022-07-23', '2022-07-22', '2022-07-21', '2022-07-20', '2022-07-19', '2022-07-18', '2022-07-17', '2022-07-16', '2022-07-15', '2022-07-14', '2022-07-13', '2022-07-12', '2022-07-11', '2022-07-10', '2022-07-09', '2022-07-08', '2022-07-07', '2022-07-06', '2022-07-05', '2022-07-04', '2022-07-03', '2022-07-02', '2022-07-01', '2022-06-30', '2022-06-29', '2022-06-28', '2022-06-27', '2022-06-26', '2022-06-25', '2022-06-24', '2022-06-23', '2022-06-22', '2022-06-21', '2022-06-20', '2022-06-19', '2022-06-18', '2022-06-17', '2022-06-16', '2022-06-15', '2022-06-14', '2022-06-13', '2022-06-12', '2022-06-11', '2022-06-10', '2022-06-09', '2022-06-08', '2022-06-07', '2022-06-06', '2022-06-05', '2022-06-04', '2022-06-03', '2022-06-02', '2022-06-01', '2022-05-31', '2022-05-30', '2022-05-29', '2022-05-28', '2022-05-27', '2022-05-26', '2022-05-25', '2022-05-24', '2022-05-23', '2022-05-22', '2022-05-21', '2022-05-20', '2022-05-19', '2022-05-18', '2022-05-17', '2022-05-16', '2022-05-15', '2022-05-14', '2022-05-13', '2022-05-12', '2022-05-11', '2022-05-10', '2022-05-09', '2022-05-08', '2022-05-07', '2022-05-06', '2022-05-05', '2022-05-04', '2022-05-03', '2022-05-02', '2022-05-01', '2022-04-30', '2022-04-29', '2022-04-28', '2022-04-27', '2022-04-26', '2022-04-25', '2022-04-24', '2022-04-23', '2022-04-22', '2022-04-21', '2022-04-20', '2022-04-19', '2022-04-18', '2022-04-17', '2022-04-16', '2022-04-15', '2022-04-14', '2022-04-13', '2022-04-12', '2022-04-11', '2022-04-10', '2022-04-09', '2022-04-08', '2022-04-07', '2022-04-06', '2022-04-05', '2022-04-04', '2022-04-03', '2022-04-02', '2022-04-01', '2022-03-31', '2022-03-30', '2022-03-29', '2022-03-28', '2022-03-27', '2022-03-26', '2022-03-25', '2022-03-24', '2022-03-23', '2022-03-22', '2022-03-21', '2022-03-20', '2022-03-19', '2022-03-18', '2022-03-17', '2022-03-16', '2022-03-15', '2022-03-14', '2022-03-13', '2022-03-12', '2022-03-11', '2022-03-10', '2022-03-09', '2022-03-08', '2022-03-07', '2022-03-06', '2022-03-05', '2022-03-04', '2022-03-03', '2022-03-02', '2022-03-01', '2022-02-28', '2022-02-27', '2022-02-26', '2022-02-25', '2022-02-24', '2022-02-23', '2022-02-22', '2022-02-21', '2022-02-20', '2022-02-19', '2022-02-18', '2022-02-17', '2022-02-16', '2022-02-15', '2022-02-14', '2022-02-13', '2022-02-12', '2022-02-11', '2022-02-10', '2022-02-09', '2022-02-08', '2022-02-07', '2022-02-06', '2022-02-05', '2022-02-04', '2022-02-03', '2022-02-02', '2022-02-01', '2022-01-31', '2022-01-30', '2022-01-29', '2022-01-28', '2022-01-27', '2022-01-26', '2022-01-25', '2022-01-24', '2022-01-23', '2022-01-22', '2022-01-21', '2022-01-20', '2022-01-19', '2022-01-18', '2022-01-17', '2022-01-16', '2022-01-15', '2022-01-14', '2022-01-13', '2022-01-12', '2022-01-11', '2022-01-10', '2022-01-09', '2022-01-08', '2022-01-07', '2022-01-06', '2022-01-05', '2022-01-04', '2022-01-03', '2022-01-02', '2022-01-01', '2021-12-31', '2021-12-30', '2021-12-29', '2021-12-28', '2021-12-27', '2021-12-26', '2021-12-25', '2021-12-24', '2021-12-23', '2021-12-22', '2021-12-21', '2021-12-20', '2021-12-19', '2021-12-18', '2021-12-17', '2021-12-16', '2021-12-15', '2021-12-14', '2021-12-13', '2021-12-12', '2021-12-11', '2021-12-10', '2021-12-09', '2021-12-08', '2021-12-07', '2021-12-06', '2021-12-05', '2021-12-04', '2021-12-03', '2021-12-02', '2021-12-01', '2021-11-30', '2021-11-29', '2021-11-28', '2021-11-27', '2021-11-26', '2021-11-25', '2021-11-24', '2021-11-23', '2021-11-22', '2021-11-21', '2021-11-20', '2021-11-19', '2021-11-18', '2021-11-17', '2021-11-16', '2021-11-15', '2021-11-14', '2021-11-13', '2021-11-12', '2021-11-11', '2021-11-10', '2021-11-09', '2021-11-08', '2021-11-07', '2021-11-06', '2021-11-05', '2021-11-04', '2021-11-03']
    with mp.Pool(12) as p:
        p.map(export_date, [(index_name, entity_type, d) for d in distinct_updated_dates])


def make_manifests():
    remote_data_dir = 's3://openalex/data'
    for entity_type in entities_to_indices.keys():
        total_content_length = 0
        total_record_count = 0

        entity_dir = os.path.join(data_dir, entity_type)
        manifest = os.path.join(entity_dir, "manifest")

        with open(manifest, 'w') as f:
            f.write("{\n  \"entries\": [\n")

        for root, dirs, files in os.walk(entity_dir):
            for file in files:
                if file.endswith('.gz'):
                    file_path = os.path.join(root, file)
                    s3_url = os.path.join(remote_data_dir, entity_type, os.path.relpath(file_path, entity_dir))
                    content_length = os.path.getsize(file_path)
                    record_count = sum(1 for line in gzip.open(file_path, 'rt'))

                    total_content_length += content_length
                    total_record_count += record_count

                    with open(manifest, 'a') as f:
                        f.write(
                            f"    {{\"url\": \"{s3_url}\", \"meta\": {{ \"content_length\": {content_length}, \"record_count\": {record_count} }} }},\n")

        with open(manifest, 'rb+') as f:
            f.seek(-2, os.SEEK_END)
            f.truncate()

        with open(manifest, 'a') as f:
            f.write("\n  ],\n")
            f.write("  \"meta\": {\n")
            f.write(f"    \"content_length\": {total_content_length},\n")
            f.write(f"    \"record_count\": {total_record_count}\n")
            f.write("  }\n")
            f.write("}\n")


if __name__ == "__main__":
    for entity, index in entities_to_indices.items():
        start_time = time.time()
        # r.flushdb()
        export_entity(index, entity)
        end_time = time.time()
        print(f"Total time: {end_time - start_time} seconds")
    # make_manifests()
